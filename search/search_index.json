{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"National 5 Computing Science","text":"Welcome to SQA National 5 Computer Science! <p>This course will introduce you to the exciting world of technology, where you\u2019ll learn how computers work, how to design software, and how to manage data. We\u2019ll cover three main units: Software Design and Development, Computer Systems, and Database Design and Development.</p> <p>In Software Design and Development, you\u2019ll learn how to think like a programmer, creating and testing programs to solve problems. We\u2019ll explore coding basics, developing your skills to write and troubleshoot code effectively.</p> <p>The Computer Systems unit dives into what\u2019s inside a computer and how it works. You\u2019ll learn about hardware, software, and how they work together, along with a look into how data is stored and processed.</p> <p>Finally, in Database Design and Development, you\u2019ll learn how information is organized and stored. You\u2019ll create and manage databases, making it easy to store and access data effectively.</p> <p>By the end, you\u2019ll have a solid foundation in computer science, ready to explore more advanced topics or pursue a career in tech.</p>"},{"location":"CS/","title":"Computer Systems","text":""},{"location":"CS/01-Data-Rep/","title":"Data Representation","text":""},{"location":"DDD/","title":"Database Design and Development","text":""},{"location":"SDD/","title":"Software Design and Development","text":""},{"location":"SDD/01-Development-Methodologies/","title":"Development Methodologies","text":""},{"location":"SDD/01-Development-Methodologies/#what-is-a-software-development-methodology","title":"What is a Software Development Methodology?","text":"<p>To answer this, we will split the question into two parts, Software and Development Methodology.</p> <p>As you already know, all computer systems are made up of hardware and software.</p> <p>The term hardware is easy to understand, because you can touch it. For example, the processor, RAM, network adaptor and graphic cards etc...</p> <p>Software, however, is not so obvious\u2026\u2026\u2026\u2026\u2026\u2026</p> <p>Software is all the programs, instructions and data that allow the hardware to do something useful and interesting. Some of the most used include; word, excel, PowerPoint &amp; Google (other browsers are available!)</p> <p>Tip</p> <p>Software Development is defined as the process of designing, creating, testing, and maintaining computer programs and applications. There are many different  Software Development Methodologies that all follow a different path through the Development Process. </p>"},{"location":"SDD/01-Development-Methodologies/#the-waterfall-method","title":"The Waterfall Method","text":"<p>The development methodology you will be learning is known as a Waterfall model which consists of SIX different steps.</p> <p>A benefit of the Waterfall Methodology is that we can go back a step if there is a problem and fix it before then repeating the steps in order until we have the full working solution.</p>"},{"location":"SDD/01-Development-Methodologies/#the-six-stages-of-development","title":"The Six Stages of Development","text":""},{"location":"SDD/01-Development-Methodologies/#analysis","title":"Analysis","text":"<p>What is the purpose of the program? </p> <p>What features will it have? (This is known as functional requirements)</p> <p>What are the inputs, process and outputs?</p> <p>What data structures and data types will be used?</p>"},{"location":"SDD/01-Development-Methodologies/#design","title":"Design","text":"<p>The more planning you do the quicker the creation of the final product will be</p> <p>Break a problem into chunks </p> <p>Use diagrams to create and algorithm</p> <p>Pseudocode, Structure Diagrams and Flowcharts</p>"},{"location":"SDD/01-Development-Methodologies/#implementation","title":"Implementation","text":"<p>Create the solution to the problem</p> <p>Use previously designed Algorithms to signpost the way</p>"},{"location":"SDD/01-Development-Methodologies/#testing","title":"Testing","text":"<p>All work needs to be checked thoroughly for errors. </p> <p>Rigorous testing to systematically check every single operation/event.</p> <p>Rigorously test a range of scenarios to make sure the program does what it is supposed to.</p>"},{"location":"SDD/01-Development-Methodologies/#documentation","title":"Documentation","text":"<p>Collate diagrams, algorithms and testing tables.</p> <p>These documents together form the wider documentation (user guide &amp; technical guide).</p> <p>It is important that documentation is clear.</p> <p>Documentation should also show what each person did and what has happened thus far. </p>"},{"location":"SDD/01-Development-Methodologies/#evaluation","title":"Evaluation","text":"<p>Fit for Purpose - does it do what it is supposed to do?</p> <p>Efficient use of Coding Constructs  - correct use of repetition, arrays (instead of variables) and selection statements where possible to reduce the amount of code?</p> <p>Robustness \u2013 can it cope with unexpected or incorrect input?</p> <p>Readability - it is important to write code that can be read and understood by others. This should include internal commentary, meaningful identifiers, indentation and white space.</p>"},{"location":"SDD/02-Analysis/","title":"Analysis","text":""},{"location":"SDD/03-Design/","title":"Design","text":""},{"location":"SDD/03-Design/#program-design","title":"Program Design","text":""},{"location":"SDD/03-Design/#structure-diagrams","title":"Structure Diagrams","text":""},{"location":"SDD/03-Design/#flowcharts","title":"Flowcharts","text":""},{"location":"SDD/03-Design/#pseudocode","title":"Pseudocode","text":""},{"location":"SDD/04-Software-Implementation/","title":"Software Implementation","text":""},{"location":"SI/","title":"Software Implementation","text":""},{"location":"SI/01-Input-and-Output/","title":"Input and Output","text":""},{"location":"SI/01-Input-and-Output/#python-comments","title":"Python Comments","text":"<p>All of the programs you see will have lines that start with #</p> <p>Example</p> <pre><code># This is a comment\n# The computer ignores lines that start with this symbol\n</code></pre> <p>The computer ignores lines that start with a #. </p> <p>We call these Internal Comments.  </p> <p>It is good practice to write these comments in your code, to remind you what particular parts do.</p> <p>Info</p> <p>At National 5, you will be expected to use comments in your code.</p>"},{"location":"SI/01-Input-and-Output/#print-statement","title":"Print Statement","text":"<p>During most National 5 programs, you will be asked to display things on the screen. In Python, you do this with the print() statement.</p> <p>Example</p> <pre><code>print (\"Hello world\")\nprint (\"Welcome to\", \"National 5\")\nprint (\"My name is\", name)\n</code></pre> <p>In the brackets, put the message you want to print. </p> <p>If you want to display a variable, do not use quotation marks:</p> <p>Example</p> <pre><code>print(age)\nprint(name)\n</code></pre> <p>Note</p> <p>This would print whatever is in the variable, not the word age or name.</p> <p>If you want to print a string and a variable, use a comma between the strings:</p> <p>Example</p> <pre><code>print(\"Welcome to\", \"National 5\")\nprint(\"My name is\", name)\n</code></pre>"},{"location":"SI/01-Input-and-Output/#input-statement","title":"Input Statement","text":"<p>When you want the user to enter data, use an input statement.</p> <p>Example</p> <pre><code># When you input a string\nname = input(\"Please enter your name\")\n</code></pre> <p>This shows a message on the screen 'Please enter your name' and asks the user to type in some data. The data they enter is stored in a variable.</p> <p>Example</p> <pre><code># Enter some data from the keyboard\nname = input(\"Please enter your name\")\n\ntitle = input(\"Enter book title\")\nauthor = input(\"Enter book author\")\ngenre = input(\"Enter book genre\")\n</code></pre> <p>Info</p> <p>The input statement will be used in almost all of your programs.</p>"},{"location":"SI/01-Input-and-Output/#input-with-numbers","title":"Input with Numbers","text":"<p>When you input numbers, there is an extra step you must take.</p> <p>Any data that you input is automatically assumed to be a string.</p> <p>Strings can contain any sort of characters, including digits.</p> <p>Note</p> <p>It's important, if we want to use the data as a number (for example, doing a calculation with it) that we cast (convert) it from string to a number type.</p> <p>Example</p> <pre><code># When you input a string\nname = input(\"Please enter your name\")\n\n# When you input an integer number, use int( )\nage = int(input(\"Enter age\"))\n\n# When you input a real number, use float( )\nprice = float(input(\"Enter price\"))\n</code></pre>"},{"location":"SI/02-Variables-and-Data-Types/","title":"Variables and Data Types","text":""},{"location":"SI/02-Variables-and-Data-Types/#what-are-variables","title":"What are Variables?","text":"<p>A variable is something that can be assigned a value.</p> <p>Example</p> <pre><code>x = 5\ny = 2\n</code></pre> <p>You will already have used similar in Maths. What is x + y? (the answer is 7)</p> <p>In computing however, we usually give them a longer (more meaningful) name, such as:</p> <p>Example</p> <pre><code>age = 15\nname = \"Bob\"\nemail = \"bob@gmail.com\"\n</code></pre>"},{"location":"SI/02-Variables-and-Data-Types/#python-variable-naming-rules","title":"Python Variable Naming Rules","text":"<ul> <li>A variable name must start with a letter or the underscore character</li> <li>A variable name cannot start with a number</li> <li>A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )</li> <li>Variable names are case-sensitive (age, Age and AGE are three different variables)</li> <li>A variable name cannot be any of the Python keywords.</li> </ul> <p>and although this one is not a rule....</p> <ul> <li>It is important to use meaningful or sensible variable names. </li> </ul>"},{"location":"SI/02-Variables-and-Data-Types/#types-of-variables","title":"Types of Variables","text":"<p>In programming variables have a particular type and for National 5 there are five data types that you need to know:</p> Data Type Description Integer Whole number: 12, -50, 100 Real number With a decimal point: 22.5, 0.001 String Words and symbols: hello, abc123 Character A single letter, digit or symbol: a, Z, $, # Boolean True (1) or False (0) <p>Warning</p> <p>Once a variable has been set up with a particular type, you can only assign it data of that type.</p> <p>Example</p> <pre><code># This is an integer\nmyage = int(15)\n\n# This is a real number\nprice = float(0.99)\n\n# This is a string\nfaveSubject = str(\"Computing\")\n\n# This is a character\nfirstInitial = char(\"F\")\n\n# This is a Boolean\nisStudent = bool(1)\n</code></pre>"},{"location":"SI/02-Variables-and-Data-Types/#calculations","title":"Calculations","text":"<p>Python programs will often carry out calculations with operators. The result is usually stored in a variable:</p> <p>Example</p> <pre><code>num1 = 5\nnum2 = 7\nsum = num1 + num2\n</code></pre> <p>You can use the following operators:</p> <p>Example</p> <pre><code># Three variables\nnum1 = 5\nnum2 = 7\nsum = 0.0\n\n# Addition\nsum = num1 + num2\n\n# Subtraction\nsum = num1 - num2\n\n# Division\nsum = num1 / num2\n\n# Multiplication\nsum = num1 * num2\n\n# Raise to a power\nsum = num1 ** num2\n\n#Note that \u201craising to the power\u201d means, for example, num1**num2. \n\n#To square or cube a number, you would say:\nsquare = num1 ** 2\ncube = num1 ** 3\n</code></pre>"},{"location":"SI/02-Variables-and-Data-Types/#string-concatenation","title":"String Concatenation","text":"<p>String concatenation is the term used when joining two strings.</p> <p>Example</p> <pre><code>word1 = \u201cHello\u201d\nword2 = \u201cWorld\u201d\n\nsentence = word1 + word2\n</code></pre> <p>Tip</p> <p>The example above doesn\u2019t include a space, you would have to add a space to the end of \u201cHello\u201d or the beginning of \u201cWorld\u201d.\u2003</p>"}]}